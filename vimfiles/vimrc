filetype plugin indent on

let g:easygit_enable_command = 1
let g:lsp_fold_enabled = 0
let g:lsp_highlight_references_enabled = 0
let g:lsp_signs_enabled = 0
let g:lsp_use_lua = has('nvim-0.4.0') || (has('lua') && has('patch-8.2.0775'))
let g:lsp_virtual_text_enabled = 0
let g:mapleader = "\<Space>"
let g:netrw_banner = 0
let g:skip_defaults_vim = 1

nnoremap <Leader> <NOP>
nnoremap <Leader>t <C-o>
noremap  <Leader>b :buffers<CR>:buffer<Space>
noremap  <Leader>e :Explore<CR>
noremap  <Leader>q :bwipeout<CR>
noremap  <Tab> :wincmd w<CR>

if has("clipboard")
  set clipboard^=unnamed " On mac and Windows, use * register for copy-paste
  if has("unnamedplus")  " When possible use + register for copy-paste
    set clipboard^=unnamedplus
  endif
endif

if !exists("g:syntax_on")
  syntax enable
  silent! colorscheme PaperColor
endif

set background=light
set backspace=indent,eol,start
set encoding=utf-8
set fileencodings=utf-8,cp1251,koi8-r,cp866
set fileformats=unix
set hidden
set history=5
set hlsearch
set ignorecase
set incsearch
set laststatus=0 " disable fancy statusline
set lazyredraw
set linebreak
set linespace=0
set list
set listchars=tab:•·,trail:•,nbsp:¤,extends:¦,precedes:¦
set matchtime=1
set nobackup
set noswapfile
set notitle
set nowrap
set nowritebackup
set ruler " enable oldschool statusline
set shortmess=aI
set showbreak=¬
set showmatch
set smartcase
set splitbelow
set splitright
set t_Co=256 " enable 256 colors to stop the CSApprox warning and make xterm vim shine
set ttimeout
set ttimeoutlen=50
set ttyfast
set undolevels=8
set viminfo=""
set visualbell
set wildignorecase
set wildmode=list,full
silent! set completeopt=menu,menuone,noinsert,noselect

if executable('gopls')
  autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'gopls',
    \ 'cmd': {server_info->['gopls']},
    \ 'allowlist': ['go'],
    \ })
  autocmd BufWritePre *.go LspDocumentFormatSync
endif

if executable('pyls')
  autocmd User lsp_setup call lsp#register_server({
    \ 'name': 'pyls',
    \ 'cmd': {server_info->['pyls']},
    \ 'allowlist': ['python'],
    \ 'workspace_config': {'pyls': {'plugins': {'pycodestyle': {'maxLineLength': 120}}}}
    \ })
endif

if executable('intelephense')
  augroup LspPHPIntelephense
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'intelephense',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
      \ 'allowlist': ['php'],
      \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
      \ 'workspace_config': {
      \   'intelephense': {
      \     'files': {
      \       'maxSize': 1000000,
      \       'associations': ['*.php', '*.phtml'],
      \       'exclude': [],
      \     },
      \     'completion': {
      \       'insertUseDeclaration': v:true,
      \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
      \       'triggerParameterHints': v:true,
      \       'maxItems': 100,
      \     },
      \     'format': {
      \       'enable': v:true
      \     },
      \   },
      \ }
      \})
  augroup END
endif

if executable('yaml-language-server')
  augroup LspYaml
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'yaml-language-server',
      \ 'cmd': {server_info->['yaml-language-server', '--stdio']},
      \ 'allowlist': ['yaml', 'yaml.ansible'],
      \ 'workspace_config': {
      \   'yaml': {
      \     'validate': v:true,
      \     'hover': v:true,
      \     'completion': v:true,
      \     'customTags': [],
      \     'schemas': {},
      \     'schemaStore': { 'enable': v:true },
      \   }
      \ }
      \})
  augroup END
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> <Leader>[ :LspReferences<CR>
  nmap <buffer> <Leader>] :LspDefinition<CR>
  nmap <buffer> <Leader>h :LspHover<CR>
  nmap <buffer> <Leader>i :LspImplementation<CR>
  nmap <buffer> <Leader>l :LspDocumentDiagnostics<CR>
endfunction

augroup lsp_install
  autocmd!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
